name: fdk-dotnet
phoneBookId: functions
team: Functions
description: dotnet FDK
runnerTag: latest
version: 0 # Set by set_fdk_version and the setup_*_image steps, needs to be present here anyway
releaseBranches: ["master"]
triggerOnCommitBranches: ["pull-requests", "*"]
scheduleOnOl7Hosts = true
buildImageVersion: ""
runtimeImageVersion: ""
fdkVersion: ""

authCompartmentOcid: ocid1.compartment.oc1..aaaaaaaajnvcjjwfciaef2iaofrv5oq5yupxaivpzy7qrheify3lh42po27q
pipelineTriggerConfig: {
    "branchFilter": {
        "master": ["ocid1.devopsbuildpipeline.oc1.phx.amaaaaaaepf6idia5fvbozpd6aixqvep4wx7uz3gzp7dmf4mqtfvrjcs6seq"]
    }
}


variables: {
    HTTP_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
    HTTPS_PROXY: "http://www-proxy-hqdc.us.oracle.com:80"
    NO_PROXY: "localhost,127.0.0.1,.us.oracle.com,.oraclecorp.com"
    RELEASE: "false"
}

exportVariables {
    FDK_VERSION = "${set_fdk_version.fdk_version}"
}

steps: [
    ### Build FDK ###
    {
        name: set_fdk_version
        type: make
        environment: {
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        dotEnvFilePath: exportVariables.env
        artifacts: [
            "**"
        ]
    },
    {
        name: build_fdk
        type: make
        runnerImage: build-runner-make-ol8
        dependsOn: set_fdk_version
        environment: {
            VERSION: ${version}
            http_proxy: ${HTTP_PROXY}
            https_proxy: ${HTTPS_PROXY}
            no_proxy: ${NO_PROXY}
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "build", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: unit_test
        type: make
        dependsOn: build_fdk
        runnerImage: build-runner-make-ol8
        environment: {
            http_proxy: ${HTTP_PROXY}
            https_proxy: ${HTTPS_PROXY}
            no_proxy: ${NO_PROXY}
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "unit_test", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_fdk
        type: publishgeneric
        dependsOn: unit_test
        repository: faas-release-generic-local
        filePathsToPublish: [
            { localFile: "fdk-nuget-pkg/*", targetDir: "fdk-dotnet" }
        ]
        artifacts: [
            "**"
        ]
    },
    
    ### .NET 3.1 Images ###
    {
        name: setup_dotnet3.1_build_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            DOTNET_VERSION: "3.1"
            FDK_VERSION: ${version}
            VERSION_SUFFIX: "dev"
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: build_image_dotnet3.1
        type: dockerizer
        dependsOn: setup_dotnet3.1_build_image,
        dockerFile: "./internal/images/build/3.1/Dockerfile"
        dockerBuildPwd: "./internal/images/build/3.1"
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_build_image_dotnet3.1
        type: publishdocker
        dependsOn: build_image_dotnet3.1
        imageName: "fdk-dotnet"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_build3.1
        type: make
        dependsOn: publish_build_image_dotnet3.1
        environment: {
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: setup_dotnet3.1_runtime_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            DOTNET_VERSION: "3.1"
            FDK_VERSION: ${version}
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: runtime_image_dotnet3.1
        type: dockerizer
        dependsOn: setup_dotnet3.1_runtime_image,
        dockerFile: "./internal/images/runtime/3.1/Dockerfile"
        dockerBuildPwd: "./internal/images/runtime/3.1"
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_runtime_image_dotnet3.1
        type: publishdocker
        dependsOn: runtime_image_dotnet3.1
        imageName: "fdk-dotnet"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_runtime3.1
        type: make
        dependsOn: publish_runtime_image_dotnet3.1
        environment: {
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: setup_test_image_build3.1
        type: make
        dependsOn: [unit_test, fixup_version_build3.1, fixup_version_runtime3.1]
        environment: {
            DOTNET_VERSION: "3.1"
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "setup_test_image_build", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_hello_world_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/hello-world-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/hello-world-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_hello_world_fn_3.1
        type: publishdocker
        dependsOn: build_test_image_hello_world_fn_3.1
        imageName: "faas-hello-world-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_oci_sdk_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/oci-sdk-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/oci-sdk-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_oci_sdk_fn_3.1
        type: publishdocker
        dependsOn: build_test_image_oci_sdk_fn_3.1
        imageName: "faas-oci-sdk-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_runtime_version_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/runtime-version-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/runtime-version-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_runtime_version_fn_3.1
        type: publishdocker
        dependsOn: build_test_image_runtime_version_fn_3.1
        imageName: "faas-runtime-version-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_timeout_fn_3.1
        type: dockerizer
        dependsOn: setup_test_image_build3.1
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/timeout-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/timeout-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_timeout_fn_3.1
        type: publishdocker
        dependsOn: build_test_image_timeout_fn_3.1
        imageName: "faas-timeout-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },

    ### .NET 6.0 Images ###
    {
        name: setup_dotnet6.0_build_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            DOTNET_VERSION: "6.0"
            FDK_VERSION: ${version}
            VERSION_SUFFIX: "dev"
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: build_image_dotnet6.0
        type: dockerizer
        dependsOn: setup_dotnet6.0_build_image,
        dockerFile: "./internal/images/build/6.0/Dockerfile"
        dockerBuildPwd: "./internal/images/build/6.0"
        environment: {
            DOCKER_BUILDKIT: "1"
        }
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_build_image_dotnet6.0
        type: publishdocker
        dependsOn: build_image_dotnet6.0
        imageName: "fdk-dotnet"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_build6.0
        type: make
        dependsOn: publish_build_image_dotnet6.0
        environment: {
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: setup_dotnet6.0_runtime_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            DOTNET_VERSION: "6.0"
            FDK_VERSION: ${version}
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: runtime_image_dotnet6.0
        type: dockerizer
        dependsOn: setup_dotnet6.0_runtime_image,
        dockerFile: "./internal/images/runtime/6.0/Dockerfile"
        dockerBuildPwd: "./internal/images/runtime/6.0"
        environment: {
            DOCKER_BUILDKIT: "1"
        }
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_runtime_image_dotnet6.0
        type: publishdocker
        dependsOn: runtime_image_dotnet6.0
        imageName: "fdk-dotnet"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_runtime6.0
        type: make
        dependsOn: publish_runtime_image_dotnet6.0
        environment: {
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: setup_test_image_build6.0
        type: make
        dependsOn: [unit_test, fixup_version_build6.0, fixup_version_runtime6.0]
        environment: {
            DOTNET_VERSION: "6.0"
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "setup_test_image_build", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_hello_world_fn_6.0
        type: dockerizer
        dependsOn: setup_test_image_build6.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/hello-world-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/hello-world-fn"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_hello_world_fn_6.0
        type: publishdocker
        dependsOn: build_test_image_hello_world_fn_6.0
        imageName: "faas-hello-world-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_oci_sdk_fn_6.0
        type: dockerizer
        dependsOn: setup_test_image_build6.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/oci-sdk-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/oci-sdk-fn"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_oci_sdk_fn_6.0
        type: publishdocker
        dependsOn: build_test_image_oci_sdk_fn_6.0
        imageName: "faas-oci-sdk-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_runtime_version_fn_6.0
        type: dockerizer
        dependsOn: setup_test_image_build6.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/runtime-version-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/runtime-version-fn"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_runtime_version_fn_6.0
        type: publishdocker
        dependsOn: build_test_image_runtime_version_fn_6.0
        imageName: "faas-runtime-version-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_timeout_fn_6.0
        type: dockerizer
        dependsOn: setup_test_image_build6.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/timeout-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/timeout-fn"
        images : [
            {
                platform: "linux/x86_64"
            },
            {
                platform: "linux/arm64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_timeout_fn_6.0
        type: publishdocker
        dependsOn: build_test_image_timeout_fn_6.0
        imageName: "faas-timeout-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    
    ### .NET 8.0 Images ###
    {
        name: setup_dotnet8.0_build_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            DOTNET_VERSION: "8.0"
            FDK_VERSION: ${version}
            VERSION_SUFFIX: "dev"
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: build_image_dotnet8.0
        type: dockerizer
        dependsOn: setup_dotnet8.0_build_image,
        dockerFile: "./internal/images/build/8.0/Dockerfile"
        dockerBuildPwd: "./internal/images/build/8.0"
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_build_image_dotnet8.0
        type: publishdocker
        dependsOn: build_image_dotnet8.0
        imageName: "fdk-dotnet"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_build8.0
        type: make
        dependsOn: publish_build_image_dotnet8.0
        environment: {
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: setup_dotnet8.0_runtime_image
        type: make
        dependsOn: set_fdk_version
        environment: {
            DOTNET_VERSION: "8.0"
            FDK_VERSION: ${version}
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_image_version", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: runtime_image_dotnet8.0
        type: dockerizer
        dependsOn: setup_dotnet8.0_runtime_image,
        dockerFile: "./internal/images/runtime/8.0/Dockerfile"
        dockerBuildPwd: "./internal/images/runtime/8.0"
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
        }
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_runtime_image_dotnet8.0
        type: publishdocker
        dependsOn: runtime_image_dotnet8.0
        imageName: "fdk-dotnet"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    # The individual build chains for each image can't be merged if the value of the version vaiable differs,
    # setting it back to the FDK version because that's the only bit that changes per build
    {
        name: fixup_version_runtime8.0
        type: make
        dependsOn: publish_runtime_image_dotnet8.0
        environment: {
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "set_fdk_version", args: "-f internal/Makefile" }
        ]
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: setup_test_image_build8.0
        type: make
        dependsOn: [unit_test, fixup_version_build8.0, fixup_version_runtime8.0]
        environment: {
            DOTNET_VERSION: "8.0"
            RELEASE: ${RELEASE}
        }
        makeCommands: [
            { target: "setup_test_image_build", args: "-f internal/Makefile" }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_hello_world_fn_8.0
        type: dockerizer
        dependsOn: setup_test_image_build8.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/hello-world-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/hello-world-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_hello_world_fn_8.0
        type: publishdocker
        dependsOn: build_test_image_hello_world_fn_8.0
        imageName: "faas-hello-world-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_oci_sdk_fn_8.0
        type: dockerizer
        dependsOn: setup_test_image_build8.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/oci-sdk-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/oci-sdk-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_oci_sdk_fn_8.0
        type: publishdocker
        dependsOn: build_test_image_oci_sdk_fn_8.0
        imageName: "faas-oci-sdk-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_runtime_version_fn_8.0
        type: dockerizer
        dependsOn: setup_test_image_build8.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/runtime-version-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/runtime-version-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_runtime_version_fn_8.0
        type: publishdocker
        dependsOn: build_test_image_runtime_version_fn_8.0
        imageName: "faas-runtime-version-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
    {
        name: build_test_image_timeout_fn_8.0
        type: dockerizer
        dependsOn: setup_test_image_build8.0
        dockerBuildArgs: {
            HTTP_PROXY: ${HTTP_PROXY}
            HTTPS_PROXY: ${HTTPS_PROXY}
            NO_PROXY: ${NO_PROXY}
            BUILD_IMAGE_VERSION: ${buildImageVersion}
            RUNTIME_IMAGE_VERSION: ${runtimeImageVersion}
            FDK_VERSION: ${fdkVersion}
        }
        dockerFile: "./internal/test-images/timeout-fn/Build_file.bs"
        dockerBuildPwd: "./internal/test-images/timeout-fn"
        images : [
            {
                platform: "linux/x86_64"
            }
        ]
        artifacts: [
            "**"
        ]
    },
    {
        name: publish_test_image_timeout_fn_8.0
        type: publishdocker
        dependsOn: build_test_image_timeout_fn_8.0
        imageName: "faas-timeout-fn"
        repository: odo-docker-signed-local
        artifacts: [
            "**"
        ]
    },
]